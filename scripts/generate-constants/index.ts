import { readFile, writeFile } from 'node:fs/promises'

import { Message } from '../../packages/puregram/src/updates/'

const CONSTANTS_PATH = `${__dirname}/../../packages/puregram/src/utils/constants.ts`

const getGetters = (instance: Message) => (
  Object.entries(
    Object.getOwnPropertyDescriptors(
      Reflect.getPrototypeOf(instance)
    )
  ).filter(e => typeof e[1].get === 'function' && e[0] !== '__proto__')
    .map(e => e[0])
)

const convertToSnakeCase = (value: string) => (
  value.replace(/([A-Z])/g, '_$1').toLowerCase()
)

const main = async () => {
  let constantsTsContent = await readFile(CONSTANTS_PATH, 'utf8')

  // INFO: generate-constants-events
  {
    let clauses: string[] = []

    const message = new Message({ chat: { id: 0, type: 'channel' }, date: 0, message_id: 1 })
    const rawGetters = getGetters(message)

    const eventsIndex = rawGetters.findIndex(e => e === 'newChatMembers')
    const getters = rawGetters.slice(eventsIndex).filter(e => !['proximityAlertTriggered'].includes(e)) // FIXME

    // ['newChatMembers', 'new_chat_members'],
    for (const getter of getters) {
      clauses.push(`['${getter}', '${convertToSnakeCase(getter)}'],`)
    }

    const EVENTS = `export const EVENTS: [keyof Message, MessageEventName][] = [\n${clauses.map(clause => `  ${clause}`).join('\n').slice(0, -1)}\n]`
    const content = `// @autogenerated generate-constants-events start\n${EVENTS}\n// @autogenerated generate-constants-events end`

    constantsTsContent = constantsTsContent.replace(/\/\/\s@autogenerated\sgenerate-constants-events\sstart\n(.*)\n\/\/\s@autogenerated\sgenerate-constants-events\send/is, content)

    console.log(`[generate-constants-events] Successfully generated ${clauses.length - 1} EVENTS clauses`)
  }

  await writeFile(CONSTANTS_PATH, constantsTsContent)
}

main().catch(console.error)
